{
  "name": "curry",
  "description": "flexible but simple curry function",
  "version": "0.0.4",
  "homepage": "https://github.com/dominictarr/curry",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/curry.git"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com"
  },
  "main": "./curry",
  "scripts": {
    "test": "synct test/*.js"
  },
  "readme": "\nCURRY\n=====\n\n#curry function without anything *too clever*\n_(... because hunger is the finest spice)_\n\ncan curry left an right and pass in a context object in one easy call.\n\n    var fn = curry([left],function,[right],self)\n\nwrap your curry args in Arrays\n\ncalling `fn(x)` will stick `x` in between left and right curry ingredients.\n\n*left* and *right* are _*Arrays*_, and are _optional_.\n\ni.e.\n\n    var fn = curry(funx,[1,2,3])\n\nis the same as\n\n    var fn = curry([],funx,[1,2,3])\n\nthis makes `fn(X)` call `funx(X,1,2,3)`\n\n##calling styles:\n\nin all, there are 8 ways to call the function.\n\n    curry([left],fn,[right])\n    curry(fn,[right])\n    curry([left],fn)\n    curry(fn)\n\n    curry([left],fn,[right],self)\n    curry(fn,[right],self)\n    curry([left],fn,self)\n    curry(fn,self)\n\n#full test coverage for documented usuage!\n\n    > expresso test/curry.expresso.js\n",
  "readmeFilename": "readme.markdown",
  "_id": "curry@0.0.4",
  "_from": "curry@0.0.x"
}

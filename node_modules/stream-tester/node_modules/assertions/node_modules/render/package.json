{
  "name": "render",
  "description": "pretty print javascript objects or generate JSON, with comma first and comma trailing",
  "version": "0.1.3",
  "homepage": "https://github.com/dominictarr/render",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/render.git"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com"
  },
  "dependencies": {
    "traverser": "0.0.x"
  },
  "devDependencies": {
    "it-is": "0.0.x"
  },
  "readme": "#Render#\n## 4 styles\n  \n  * comma first: `.cf`\n  * comma trailing : `.ct`\n  * comma fist bracket newline: `.cfbn`\n  * comma trailing bracket newline: `.ctbn`\n\n## 3 handy modes\n\n  * return string `render.[cf|ct|cfbn|ctbn]`\n  * log to console `render.log.[cf|ct|cfbn|ctbn]`\n  * return json `render.json.[cf|ct|cfbn|ctbn]`\n\n#Layout Styles#\n\nthis object:\n\n    var renderme = \n        { key1: value\n        , key2: value\n        , child: \n          { key1: value\n          , key2: value } }\n\nimport render:\n\n    var render = require('render')\n\n##indented, comma-first, object-newline\n\n    render.ct(renderme)\n\n    // render(renderme,{joiner:\"\\n, \", indent: '  ', padMulti: ['\\n','']})\n\n    { key1: 1\n    , key2: 2\n    , child: \n      { key1: 3\n      , key2: 4 } }\n\n##indented, comma-first, bracket-newline, cl-bracket-newline\n\n    render.cfbn(renderme)\n\n    // render(renderme,{joiner:\"\\n, \", indent: '  ', padJoin: ['\\n  ','\\n']}\n\n    {\n      key1: 1\n    , key2: 2\n    , child: {\n        key1: 3\n      , key2: 4\n      }\n    }\n\n##indented, comma-trailing, object-newline\n\n    render.ct(renderme)\n\n    // render(renderme,{joiner:\",\\n  \", indent: '  ', padJoin: ['\\n  ','\\n']}\n\n    { key1: value,\n      key2: value,\n      child: \n      { key1: value,\n        key2: value } }\n\n\n##indented, comma-first, bracket-ownline, cl-bracket-newline\n\n    render.ctbn(renderme)\n\n    // render(renderme,{joiner:\",\\n  \", indent: '  ', padJoin: ['\\n  ','\\n']}\n\n    {\n      key1: 1,\n      key2: 2,\n      child: {\n        key1: 3,\n        key2: 4\n      }\n    }\n\n\n#Heavy Duty Object -> ASCII\n\n    render(object,options)\n\noptions is a {} of functions which define how a particular type is stringified.\n\n(see `render.js` and `test/*.js` for examples)\n\nthese functions are:\n\n    value // display a primitive value\n    key // display a key (on an object, but not an array)\n    join // join a list object key->value strings into one string (default joins with ','s\n    surround // puts the brackets on {} or [] \n    referenced // when a object is repeated later (default: varX={...})\n    reference // when a object is a repeat (varX\n\n    string // stringify string (useful if you want to handle multi line strings a special way\n    \n#Renderer function args#\n\n    function(value, traverserProperties, default)\n    \n`value` is the item to be renderer,\n`traverserProperties` if information about current place in the tree/graph \n(see https://github.com/dominictarr/traverser)\n`default` is the default rendering function for this item.\n\n#Layout Control#\n\nalso, padding around certain items can be changed by setting the following values of options:\n\n    indent: '' //indentation applied to each line after the first when something renders to a string with multiple lines.\n    , joiner: ', ' // string to join arrays and objects\n    , pad: '' \n    , padKey: ' ' //padding after the ':'\n    , padSingle: ['', ''] //padding around a single value\n    , padJoin: [' ', ' '] //padding around a join (but inside the brackets)\n    , padMulti: ['', ''] //padding around an object or Array when it goes over multiple lines\n    , padRoot: ['', ''] //padding around the root object (only applied if it's multi lined)\n    \nexamples, by adjusting these settings you can display an object in many different styles:\n",
  "readmeFilename": "README.md",
  "_id": "render@0.1.3",
  "_from": "render@0.1"
}

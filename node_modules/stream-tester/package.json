{
  "name": "stream-tester",
  "version": "0.0.3",
  "description": "Streams to make test other Streams",
  "main": "index.js",
  "dependencies": {
    "through": "~0.0.3",
    "from": "~0.0.2",
    "assertions": "~2.3.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "stream",
    "test",
    "spec",
    "exercise",
    "pipe"
  ],
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "dominictarr.com"
  },
  "license": "BSD",
  "readme": "#Streams to assist testing Streams\n\nwriting streams can be difficult, one of the most difficult aspects can be testing them througherly.\n\nthat is where stream-tester comes in. \nstream-tester can be used to generate data to exercise your streams.\ncombine it with [stream-spec](https://github.com/dominictarr/stream-spec)\nwhich will validate your stream's behaviour and you've got a pretty easy test suite.\n\n## createRandomStream (generator, max)\n\ncreate a stream of random chunks. `generator` defaults to `Math.random`.\nemit `'end'` after `max` chunks. `max` defaults to `Infinity`\n\n## createIncStream (max)\n\ncreate a stream of increasing numbers, up to `max`\n\n## createPauseStream (prob, delay)\n\ncreate a through stream that randomly pauses\n(returns false from `write`). `prob` is the probability\nof a pause. `delay` is the time to wait before emitting `'drain'`. defaults are `prob=0.1`, and `delay` is next tick.\n",
  "readmeFilename": "readme.markdown",
  "_id": "stream-tester@0.0.3",
  "dist": {
    "shasum": "a275aea3c41ba726d795a21e31c01a329ce77eab"
  },
  "_from": "stream-tester@0.0.3"
}

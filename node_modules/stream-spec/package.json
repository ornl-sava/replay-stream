{
  "name": "stream-spec",
  "version": "0.3.1",
  "description": "executable specification for Stream (to make testing streams easy)",
  "main": "index.js",
  "scripts": {
    "test": "node test/writable.js; node test/readable.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/stream-spec.git"
  },
  "keywords": [
    "stream",
    "spec",
    "specification",
    "streams",
    "test"
  ],
  "dependencies": {
    "macgyver": "~1.6.1",
    "assertions": "2.3"
  },
  "author": {
    "name": "Dominic Tarr"
  },
  "license": [
    "MIT",
    "Apache2"
  ],
  "readme": "# StreamSpec\n\n`stream-spec` is a executable specification for Stream.\nit's purpose it to make it easy to test user-land streams have correct behavour.\n\n[illustrated](https://github.com/dominictarr/stream-spec/blob/master/states.markdown)\n[explained](https://github.com/dominictarr/stream-spec/blob/master/stream_spec.md)\n\n\n``` js\nvar spec = require('stream-spec')\nspec(stream)\n  .readableWritable({error: false})\n  .pausable()\n  .validateOnExit()\n\nstream.write('data')\n//...\n```\n\n## types of `Stream`\n\n### Writable (but not readable)\n\na `WritableStream` must implement `write`, `end`, `destroy` and emit `'drain'` if it pauses,\nand `'close'` after the stream ends, or is destroyed.\n\nIf the stream is sync (does no io) it probably does not need to pause, so the `write()` should never equal `false`\n\n``` js\nspec(stream)\n  .writable()\n  .drainable()\n  .validateOnExit()\n```\n\n### Readable (but not writable)\n\na `ReadableStream` must emit `'data'`, `'end'`, and implement `destroy`,\nand `'close'` after the stream ends, or is destroyed.\nis strongly recommended to implement `pause` and `resume`\n\nIf the option `{strict: true}` is passed, it means the stream is not allowed to emit\n`'data'` or `'end'` when the stream is paused.\n\nIf the option `{end: false}` is passed, then end may not be emitted.\n\n``` js\nspec(stream)\n  .readable()\n  .pausable({strict: true})) //strict is optional.\n  .validateOnExit()\n```\n\n### Through (sync writable and readable, aka: 'filter')\n\nA `Stream` that is both readable and writable, and where the input is processed and then emitted as output, more or less directly. \nExample, [zlib](http://nodejs.org/docs/api/zlib.html). contrast this with duplex stream.\n\nwhen you call `pause()` on a `ThroughStream`, it should change it into a paused state on the writable side also,\nand `write()===false`. Calling `resume()` should cause `'drain'` to be emitted eventually.\n\nIf the option `{strict: true}` is passed, it means the stream is not allowed to emit\n`'data'` or `'end'` when the stream is paused.\n\n``` js\nspec(stream)\n  .through({strict: true}) //strict is optional. \n  .validateOnExit()\n```\n\n### Duplex\n\nA `Stream` that is both readable and writable, but the streams go off to some other place or thing,\nand are not coupled directly. The readable and writable side of a `DuplexStream` has thier own pause state.\n\nIf the option `{strict: true}` is passed, it means the stream is not allowed to emit\n`'data'` or `'end'` when the stream is paused.\n\n``` js\nspec(stream)\n  .duplex({strict: true})\n  .validateOnExit()\n```\n\n### other options\n\n``` js\nspec(stream, name) //use name as the name of the stream in error messages.\n\nspec(stream, {\n  name: name,   //same as above.\n  strict: true, //'data' nor 'end' may be emitted when paused.\n  error: true,  //this stream *must* error.\n  error: false, //this stream *must not* error.\n                //if neither error: boolean option is passed, the stream *may* error.\n  })\n\n\n\n```\n",
  "readmeFilename": "readme.markdown",
  "_id": "stream-spec@0.3.1",
  "dist": {
    "shasum": "76ed03d7aea7fe11357b7a0b99f4bf46585a59e6"
  },
  "_from": "stream-spec@0.3.1"
}
